package problem.model;

import java.util.Date;
import java.util.Objects;

/**
 * Class TodoItem consists of the following information: text, completed, due, priority and
 * category
 */
public class TodoItem {

  private Integer id;
  private String text;
  private Boolean completed;
  private Date due;
  private Integer priority;
  private String category;

  /**
   * Constructor for TodoItem
   *
   * @param id        - id of the item, will be generated by TodoModel
   * @param text      - a description of the task to be done
   * @param completed - indicates whether the task is completed or incomplete, will be false by
   *                  default
   * @param due       - a due date
   * @param priority  - an integer indicating the priority of the todo, must be between 1 and 3,
   *                  will be 3 by default
   * @param category  - a user-specified String that can be used to group related todos
   */
  public TodoItem(Integer id, String text, Boolean completed, Date due, Integer priority,
      String category) {
    this.id = id;
    this.text = text;
    this.completed = completed;
    this.due = due;
    this.priority = priority;
    this.category = category;
  }

  /**
   * Getter for id
   *
   * @return the id of the item
   */
  public Integer getId() {
    return id;
  }

  /**
   * Getter for text
   *
   * @return the description of the task to be done
   */
  public String getText() {
    return text;
  }

  /**
   * Getter for if completed
   *
   * @return whether the task is completed or incomplete
   */
  public Boolean getCompleted() {
    return completed;
  }

  /**
   * Getter for due date
   *
   * @return the due date
   */
  public Date getDue() {
    return due;
  }

  /**
   * Getter for priority
   *
   * @return the priority of the todo
   */
  public Integer getPriority() {
    return priority;
  }

  /**
   * Getter for category
   *
   * @return the category of the todo
   */
  public String getCategory() {
    return category;
  }

  /**
   * Setter for id
   *
   * @param id - id to be set
   */
  public void setId(Integer id) {
    this.id = id;
  }

  /**
   * Setter for completed
   *
   * @param completed -  whether the task is completed or incomplete
   */
  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }

  /**
   * Indicates whether some other object is "equal to" this one.
   *
   * @param o - the reference object with which to compare.
   * @return true if this object is the same as the obj argument; false otherwise.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TodoItem todoItem = (TodoItem) o;
    return Objects.equals(id, todoItem.id) && Objects.equals(text, todoItem.text)
        && Objects.equals(completed, todoItem.completed) && Objects.equals(due,
        todoItem.due) && Objects.equals(priority, todoItem.priority)
        && Objects.equals(category, todoItem.category);
  }

  /**
   * Returns a hash code value for the object.
   *
   * @return a hash code value for this object.
   */
  @Override
  public int hashCode() {
    return Objects.hash(id, text, completed, due, priority, category);
  }

  /**
   * Returns a string representation of the object.
   *
   * @return a string representation of the object.
   */
  @Override
  public String toString() {
    return "TodoItem{" +
        "id=" + id +
        ", text='" + text + '\'' +
        ", completed=" + completed +
        ", due=" + due +
        ", priority=" + priority +
        ", category='" + category + '\'' +
        '}';
  }
}
